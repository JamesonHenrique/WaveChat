/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getMessages } from '../fn/mensagem/get-messages';
import { GetMessages$Params } from '../fn/mensagem/get-messages';
import { MessageResponse } from '../models/message-response';
import { saveMessage } from '../fn/mensagem/save-message';
import { SaveMessage$Params } from '../fn/mensagem/save-message';
import { setMessageService } from '../fn/mensagem/set-message-service';
import { SetMessageService$Params } from '../fn/mensagem/set-message-service';
import { uploadMedia } from '../fn/mensagem/upload-media';
import { UploadMedia$Params } from '../fn/mensagem/upload-media';


/**
 * Operações relacionadas a mensagens
 */
@Injectable({ providedIn: 'root' })
export class MensagemService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveMessage()` */
  static readonly SaveMessagePath = '/api/v1/messages';

  /**
   * Salvar mensagem.
   *
   * Salva uma nova mensagem
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveMessage$Response(params: SaveMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return saveMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Salvar mensagem.
   *
   * Salva uma nova mensagem
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveMessage(params: SaveMessage$Params, context?: HttpContext): Observable<void> {
    return this.saveMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `setMessageService()` */
  static readonly SetMessageServicePath = '/api/v1/messages';

  /**
   * Marcar mensagem como vista.
   *
   * Marca as mensagens de um chat como vistas
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setMessageService()` instead.
   *
   * This method doesn't expect any request body.
   */
  setMessageService$Response(params: SetMessageService$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return setMessageService(this.http, this.rootUrl, params, context);
  }

  /**
   * Marcar mensagem como vista.
   *
   * Marca as mensagens de um chat como vistas
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setMessageService$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setMessageService(params: SetMessageService$Params, context?: HttpContext): Observable<void> {
    return this.setMessageService$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadMedia()` */
  static readonly UploadMediaPath = '/api/v1/messages/upload-media';

  /**
   * Enviar mídia.
   *
   * Envia um arquivo de mídia em uma mensagem
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadMedia()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMedia$Response(params: UploadMedia$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadMedia(this.http, this.rootUrl, params, context);
  }

  /**
   * Enviar mídia.
   *
   * Envia um arquivo de mídia em uma mensagem
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadMedia$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMedia(params: UploadMedia$Params, context?: HttpContext): Observable<void> {
    return this.uploadMedia$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMessages()` */
  static readonly GetMessagesPath = '/api/v1/messages/chat/{chat-id}';

  /**
   * Obter mensagens do chat.
   *
   * Obtém todas as mensagens de um chat específico
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessages$Response(params: GetMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MessageResponse>>> {
    return getMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter mensagens do chat.
   *
   * Obtém todas as mensagens de um chat específico
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessages(params: GetMessages$Params, context?: HttpContext): Observable<Array<MessageResponse>> {
    return this.getMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MessageResponse>>): Array<MessageResponse> => r.body)
    );
  }

}
